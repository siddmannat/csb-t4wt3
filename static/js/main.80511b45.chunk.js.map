{"version":3,"sources":["App.js","index.js"],"names":["App","passageRef","useRef","questionRef","useState","answer","setAnswer","model","setModel","loadModel","qna","loadedModel","console","log","answerQuestion","e","which","passage","current","value","question","findAnswers","answers","useEffect","className","type","color","height","width","Fragment","ref","rows","cols","onKeyPress","size","map","ans","idx","text","Math","floor","score","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wXAiFeA,EAnEH,WAEV,IAAMC,EAAaC,iBAAO,MACpBC,EAAcD,iBAAO,MAC3B,EAA4BE,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAS,iDAAG,8GACUC,MADV,OACVC,EADU,OAEhBH,EAASG,GACTC,QAAQC,IAAI,iBAHI,2CAAH,qDAOTC,EAAc,iDAAG,WAAOC,GAAP,wFACL,KAAZA,EAAEC,OAA0B,OAAVT,EADD,uBAEnBK,QAAQC,IAAI,uBACNI,EAAUhB,EAAWiB,QAAQC,MAC7BC,EAAWjB,EAAYe,QAAQC,MAJlB,SAMGZ,EAAMc,YAAYD,EAAUH,GAN/B,OAMbK,EANa,OAOnBhB,EAAUgB,GACVV,QAAQC,IAAIS,GARO,2CAAH,sDAiBpB,OALAC,qBAAU,WACRd,GACD,GAAE,IAID,qBAAKe,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACY,MAATjB,EACC,gCACE,gDACA,cAAC,IAAD,CAAQkB,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,SAG1D,eAAC,IAAMC,SAAP,qBAEE,0BAAUC,IAAK7B,EAAY8B,KAAK,KAAKC,KAAK,QAF5C,iBAIE,uBACEF,IAAK3B,EACL8B,WAAYnB,EACZoB,KAAK,OAEP,uBATF,UAWG7B,EACGA,EAAO8B,KAAI,SAACC,EAAKC,GAAN,OACT,gCACE,wCAAWA,EAAM,EAAjB,SADF,IAC8BD,EAAIE,KADlC,KAEGC,KAAKC,MAAkB,IAAZJ,EAAIK,OAAe,IAFjC,MADS,IAMX,SAMf,EC1EKC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,E","file":"static/js/main.80511b45.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\n\n// 0. Install dependencies\n// npm i @tensorflow/tfjs @tensorflow-models/qna react-loader-spinner\n\n// 1. Import dependencies\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as qna from \"@tensorflow-models/qna\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { Fragment } from \"react\";\n\nconst App = () => {\n  // 3. Setup references and state hooks\n  const passageRef = useRef(null);\n  const questionRef = useRef(null);\n  const [answer, setAnswer] = useState();\n  const [model, setModel] = useState(null);\n\n  // 4. Load Tensorflow Model\n  const loadModel = async () => {\n    const loadedModel = await qna.load();\n    setModel(loadedModel);\n    console.log(\"Model loaded.\");\n  };\n\n  // 5. Handle Questions\n  const answerQuestion = async (e) => {\n    if (e.which === 13 && model !== null) {\n      console.log(\"Question submitted.\");\n      const passage = passageRef.current.value;\n      const question = questionRef.current.value;\n\n      const answers = await model.findAnswers(question, passage);\n      setAnswer(answers);\n      console.log(answers);\n    }\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n\n  // 2. Setup input, question and result area\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {model == null ? (\n          <div>\n            <div>Model Loading</div>\n            <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\n          </div>\n        ) : (\n          <React.Fragment>\n            Passage\n            <textarea ref={passageRef} rows=\"30\" cols=\"100\"></textarea>\n            Ask a Question\n            <input\n              ref={questionRef}\n              onKeyPress={answerQuestion}\n              size=\"80\"\n            ></input>\n            <br />\n            Answers\n            {answer\n              ? answer.map((ans, idx) => (\n                  <div>\n                    <b>Answer {idx + 1} - </b> {ans.text} (\n                    {Math.floor(ans.score * 100) / 100})\n                  </div>\n                ))\n              : \"\"}\n          </React.Fragment>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}